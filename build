#!/usr/bin/python

# Configurate build paths in ./paths.json

import subprocess
import json
import os
import shutil
import psutil
import time

# Configuring items

target = "i686-pc-windows-msvc" # You can configurate this
arch = "win32" # You can configurate this
project_lib_name = "b2m.dll" # You can configurate this | Name of file when project library was compiled
is_debug = True # You can configurate this | --release or debug

cwd = os.getcwd()
paths_file = open(cwd + "\\" + "paths.json", "r")
paths = json.loads(paths_file.read())
server_path = paths["server_path"]

if not paths:
    print("You don't configure ./paths.json!")

paths_file.close()

def dev(msg):
    print("[B2M Build] " + msg)

def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
        return True
    except subprocess.CalledProcessError:
        return False

dev("Current directory " + cwd)
dev("Start build")

if run_command("cargo build --target " + target):
    dev("Cargo build successful.")

    for proc in psutil.process_iter():
        procname = proc.name()
        if procname == "srcds.exe" or procname == "srcds":
            proc.kill()
            dev("Killed srcds process")

    time.sleep(1) # чтоб не было отказов в доступе

    src_file = cwd + "\\target\\" + target + "\\" + (is_debug and "debug" or "release") + "\\" + project_lib_name
    dest_file = server_path + "\\garrysmod\\lua\\bin\\gmsv_b2m_" + arch + ".dll"
    if os.path.exists(src_file):
        if os.path.exists(dest_file):
            os.remove(dest_file)
            dev(f"Existing file {dest_file} removed.")
        shutil.move(src_file, dest_file)
        dev(f"File moved successfully.")
    else:
        dev(f"File {src_file} not found.")

    start_bat_path = server_path + "\\start.bat"
    if os.path.exists(start_bat_path):
        subprocess.Popen(start_bat_path, shell=True)
        dev("Starting server.")
    else:
        dev("start.bat not found.")
else:
    dev("Cargo build failed.")
